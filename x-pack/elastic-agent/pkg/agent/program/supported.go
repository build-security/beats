// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/elastic-agent/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/apm-server.yml
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/fleet-server.yml
	// spec/heartbeat.yml
	// spec/kubebeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
