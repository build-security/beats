name: Publish Opabeat & agent image csp-master

on:
  push:
    branches:
      - feature-2332/beats-ci

env:
  OPABEAT_REGISTRY: ${{ secrets.AWS_ECR_ID_DEVELOP }}.dkr.ecr.${{ secrets.AWS_ECR_REGION_DEVELOP }}.amazonaws.com
  OPABEAT_IMAGE_BASE: ${{ secrets.AWS_ECR_ID_DEVELOP }}.dkr.ecr.${{ secrets.AWS_ECR_REGION_DEVELOP }}.amazonaws.com/opabeat
  OPABEAT_IMAGE: ${{ secrets.AWS_ECR_ID_DEVELOP }}.dkr.ecr.${{ secrets.AWS_ECR_REGION_DEVELOP }}.amazonaws.com/opabeat:${{ github.sha }}
  AGENT_REGISTRY: ${{ secrets.AWS_ECR_ID_DEVELOP }}.dkr.ecr.${{ secrets.AWS_ECR_REGION_DEVELOP }}.amazonaws.com
  AGENT_IMAGE_BASE: ${{ secrets.AWS_ECR_ID_DEVELOP }}.dkr.ecr.${{ secrets.AWS_ECR_REGION_DEVELOP }}.amazonaws.com/elastic-agent
  AGENT_IMAGE: ${{ secrets.AWS_ECR_ID_DEVELOP }}.dkr.ecr.${{ secrets.AWS_ECR_REGION_DEVELOP }}.amazonaws.com/elastic-agent:${{ github.sha }}
  DEV: true
  SNAPSHOT: true
  PLATFORMS: linux/amd64
  TYPES: docker

jobs:
  publish_image_opabeat:
    name: Push Opabeat Docker image to ECR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.OPABEAT_REGISTRY }}
          username: ${{ secrets.AWS_ECR_KEY_DEVELOP }}
          password: ${{ secrets.AWS_ECR_SECRET_DEVELOP }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.2

      - name: Setup Mage Action
        uses: nickhstr/action-setup-mage@v1.0.0
        version: 1.11.0
      
      - name: Build Opabeat Bin
        run: |
            cd kubebeat
            GOOS=linux go build -v && docker build -t opabeat .

      - name: Build and push OPABEAT
        id: docker_build_Opabeat
        uses: docker/build-push-action@v2.1.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          file: kubebeat/Dockerfile
          push: true
          tags: |
            ${{ env.OPABEAT_IMAGE_BASE }}:csp-latest
            ${{ env.OPABEAT_IMAGE }}
      # - name: Notify job failure
      #   if: failure()
      #   uses: archive/github-actions-slack@v1.0.3
      #   with:
      #     slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
      #     slack-channel: deployment-notifications
      #     slack-text: |
      #       Hello @here !
      #       :no_entry: Deployment to ${{ env.OPABEAT_CLUSTER }} cluster failed :no_entry:
      #       :no_entry: :no_entry: Building Opabeat docker image failed :no_entry: :no_entry:
      #       *Please review the logs of the failed deployment*
      #       repo: ${{ github.repository }}
      #       branch: ${{ github.ref }}
      #       author: *${{ github.event.head_commit.author.name }}*
      #       commit desc: "'${{ github.event.head_commit.message }}'' --> '${{ github.event.head_commit.url }}''"
      #       gitflow action: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  publish_image_agent:
    name: Push Build-Server Docker image to ECR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.OPABEAT_REGISTRY }}
          username: ${{ secrets.AWS_ECR_KEY_DEVELOP }}
          password: ${{ secrets.AWS_ECR_SECRET_DEVELOP }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.2

      - name: Setup Mage Action
        uses: nickhstr/action-setup-mage@v1.0.0
        version: 1.11.0

      - name: Package Elastic-Agent
        run: |
            cd xpack/elastic-agent
            DEV=true SNAPSHOT=true PLATFORMS=linux/amd64 TYPES=docker mage -v package

      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1
          local-image: docker.elastic.co/beats/elastic-agent:8.1.0-SNAPSHOT
          image: ${{ env.AGENT_IMAGE_BASE }}, ${{ env.AGENT_IMAGE}}:csp-latest

      # - name: Notify job failure
      #   if: failure()
      #   uses: archive/github-actions-slack@v1.0.3
      #   with:
      #     slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
      #     slack-channel: deployment-notifications
      #     slack-text: |
      #       Hello @here !
      #       :no_entry: Deployment to ${{ env.OPABEAT_CLUSTER }} cluster failed :no_entry:
      #       :no_entry: :no_entry: Building buildserver docker image failed :no_entry: :no_entry:
      #       *Please review the logs of the failed deployment*
      #       repo: ${{ github.repository }}
      #       branch: ${{ github.ref }}
      #       author: *${{ github.event.head_commit.author.name }}*
      #       commit desc: "'${{ github.event.head_commit.message }}'' --> '${{ github.event.head_commit.url }}''"
      #       gitflow action: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  deploy_demo_env:
    name: Deploy to dev cluster
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [publish_image_opabeat, publish_image_agent]
    env:
      REGION: eu-west-1
      OPABEAT_TASK_DEF: dev-buildserver
      ENVIRONMENT: dev
      OPABEAT_CLUSTER: dev-eks
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_KEY_DEVELOP }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_DEVELOP }}
          aws-region: ${{ secrets.AWS_ECR_REGION_DEVELOP }}

      - name: Generate kubeconfig
        id: generate-kubeconfig
        run: |-
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r k8s/helm_templater/requirements.txt
      - name: template helm
        run: |
          python k8s/helm_templater/helm_templater.py --environment ${{ env.ENVIRONMENT }} --region ${{ env.REGION }} \
            --secret-names dev_pgSQL_5td21grs \
            console-dev-qa-devops-captcha \
            dev_Newtonsoft_5td21grs1 \
            dev_gitlibrary_5td21grs \
            dev_kubeapi_host \
            dev_kubeapi_token \
            firebase-dev-qa-devops-credentials-json \
            dev_pdp_5td21grs1 \
            dev_pgSQL_ro_5td21grs \
            slackauth_dev_qa_poc \
            dev_qa_devops_bypass_captcha \
            --verbose

      - name: BS - Deploy helm
        run: |
          helm upgrade buildserver-bsec --install --wait k8s/charts/buildserver/ -f dev.yaml  --set deployment.image.tag=${{ github.sha }} --set job.image.tag=${{ github.sha }} -n bsec
      - name: BS Failed - Send Slack message in case of failure
        if: failure()
        uses: archive/github-actions-slack@v1.0.3
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: deployment-notifications
          slack-text: |
            Hello @here !
            :no_entry: Deployment to ${{ env.OPABEAT_CLUSTER }} cluster failed :no_entry:
            *Please review the logs of the failed deployment*
            repo: ${{ github.repository }}
            branch: ${{ github.ref }}
            author: *${{ github.event.head_commit.author.name }}*
            commit desc: "'${{ github.event.head_commit.message }}'' --> '${{ github.event.head_commit.url }}''"
            gitflow action: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Slack message (deployment-notification) on new deployment
        if: success()
        uses: archive/github-actions-slack@v1.0.3
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: deployment-notifications
          slack-text: |
            Hello @here !
            :fire: New Deployment to cluster ${{ env.OPABEAT_CLUSTER }} :fire:
            repo: ${{ github.repository }}
            branch: ${{ github.ref }}
            author: *${{ github.event.head_commit.author.name }}*
            commit desc: "'${{ github.event.head_commit.message }}'' --> '${{ github.event.head_commit.url }}''"

