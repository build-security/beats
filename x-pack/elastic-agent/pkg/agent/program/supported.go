// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/elastic-agent/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/apm-server.yml
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/fleet-server.yml
	// spec/heartbeat.yml
	// spec/kubebeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
