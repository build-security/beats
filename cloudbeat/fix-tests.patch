diff --git a/cloudbeat/beater/data_test.go b/cloudbeat/beater/data_test.go
index f637b8c63b..949b5bc860 100644
--- a/cloudbeat/beater/data_test.go
+++ b/cloudbeat/beater/data_test.go
@@ -24,12 +24,17 @@ func newNumberFetcher(num int) Fetcher {
 	return &numberFetcher{num, false}
 }
 
-func (f *numberFetcher) Fetch() ([]interface{}, error) {
+func (f *numberFetcher) Fetch() ([]FetcherResult, error) {
 	return fetchValue(f.num), nil
 }
 
-func fetchValue(num int) []interface{} {
-	return []interface{}{num}
+func fetchValue(num int) []FetcherResult {
+	return []FetcherResult{
+		{
+			Type:     "xyz",
+			Resource: num,
+		},
+	}
 }
 
 func (f *numberFetcher) Stop() {
@@ -53,7 +58,7 @@ func registerNFetchers(t *testing.T, d *Data, n int) {
 func TestDataRegisterFetcher(t *testing.T) {
 	d, err := NewData(context.Background(), duration)
 	if err != nil {
-		t.Error(err)
+		t.Fatal(err)
 	}
 
 	registerNFetchers(t, d, fetcherCount)
@@ -74,7 +79,7 @@ func TestDataRun(t *testing.T) {
 
 	d, err := NewData(context.Background(), duration)
 	if err != nil {
-		t.Error(err)
+		t.Fatal(err)
 	}
 
 	registerNFetchers(t, d, fetcherCount)
diff --git a/cloudbeat/beater/file_system_fetcher_test.go b/cloudbeat/beater/file_system_fetcher_test.go
index aaddf5a55e..a9a9a70e04 100644
--- a/cloudbeat/beater/file_system_fetcher_test.go
+++ b/cloudbeat/beater/file_system_fetcher_test.go
@@ -22,7 +22,7 @@ func TestFileFetcherFetchASingleFile(t *testing.T) {
 	assert.Nil(t, err, "Fetcher was not able to fetch files from FS")
 	assert.Equal(t, 1, len(results))
 
-	result := results[0].(FileSystemResource)
+	result := results[0].Resource.(FileSystemResource)
 	assert.Equal(t, files[0], result.FileName)
 	assert.Equal(t, "600", result.FileMode)
 }
@@ -40,11 +40,11 @@ func TestFileFetcherFetchTwoPatterns(t *testing.T) {
 	assert.Nil(t, err, "Fetcher was not able to fetch files from FS")
 	assert.Equal(t, 2, len(results))
 
-	firstResult := results[0].(FileSystemResource)
+	firstResult := results[0].Resource.(FileSystemResource)
 	assert.Equal(t, outerFiles[0], firstResult.FileName)
 	assert.Equal(t, "600", firstResult.FileMode)
 
-	secResult := results[1].(FileSystemResource)
+	secResult := results[1].Resource.(FileSystemResource)
 	assert.Equal(t, outerFiles[1], secResult.FileName)
 	assert.Equal(t, "600", secResult.FileMode)
 }
@@ -61,7 +61,7 @@ func TestFileFetcherFetchDirectoryOnly(t *testing.T) {
 
 	assert.Nil(t, err, "Fetcher was not able to fetch files from FS")
 	assert.Equal(t, 1, len(results))
-	result := results[0].(FileSystemResource)
+	result := results[0].Resource.(FileSystemResource)
 
 	expectedResult := filepath.Base(dir)
 	assert.Equal(t, expectedResult, result.FileName)
@@ -87,7 +87,7 @@ func TestFileFetcherFetchOuterDirectoryOnly(t *testing.T) {
 	//All inner files should exist in the final result
 	expectedResult := []string{"output.txt", filepath.Base(innerDir)}
 	for i := 0; i < len(results); i++ {
-		fileSystemDataResources := results[i].(FileSystemResource)
+		fileSystemDataResources := results[i].Resource.(FileSystemResource)
 		assert.Contains(t, expectedResult, fileSystemDataResources.FileName)
 	}
 }
@@ -119,7 +119,7 @@ func TestFileFetcherFetchDirectoryRecursively(t *testing.T) {
 	//All inner files should exist in the final result
 	for i := 0; i < len(results); i++ {
 
-		fileSystemDataResources := results[i].(FileSystemResource)
+		fileSystemDataResources := results[i].Resource.(FileSystemResource)
 		assert.Contains(t, allFilesName, fileSystemDataResources.FileName)
 	}
 }
diff --git a/cloudbeat/bundle/csp-security-policies b/cloudbeat/bundle/csp-security-policies
--- a/cloudbeat/bundle/csp-security-policies
+++ b/cloudbeat/bundle/csp-security-policies
@@ -1 +1 @@
-Subproject commit 457f24cc169e5186e2a9215054384079c22d3018
+Subproject commit 457f24cc169e5186e2a9215054384079c22d3018-dirty
